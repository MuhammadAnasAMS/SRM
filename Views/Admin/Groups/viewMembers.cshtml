@model IEnumerable<PIA_Admin_Dashboard.Controllers.GroupMember>
@{
    ViewBag.Title = "Group Members";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var group = ViewBag.Group as PIA_Admin_Dashboard.Models.Group;
    var showDeleteOption = ViewBag.ShowDeleteOption as bool? ?? false;
}

<style>
    :root {
        --pia-green: #0a6b42;
        --pia-dark-green: #034c2e;
        --pia-light-green: #10b965;
        --pia-gold: #d4af37;
    }

    .page-container {
        width: 100%;
        margin: 0;
        padding: 0;
    }
    .warning-alert-top {
        padding: 12px 20px;
        margin-bottom: 20px;
        background: #fff3cd;
        border: 1px solid #ffd700;
        color: #856404;
        border-radius: 8px;
        font-weight: bold;
    }

    .warning-alert-top h5 {
        margin: 0 0 10px 0;
        color: #856404;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1.25rem;
        font-weight: 700;
    }

    /* Main Container - Exactly like manage groups */
    .card {
        background: #fff;
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
        padding: 35px;
        margin-bottom: 30px;
        transition: all 0.4s ease;
        border: 1px solid rgba(0, 0, 0, 0.05);
        position: relative;
        overflow: hidden;
    }

    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--pia-green), var(--pia-light-green));
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.12);
    }

    .card-header {
        font-size: 24px;
        font-weight: 700;
        color: var(--pia-dark-green);
        margin-bottom: 25px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 15px;
        padding-bottom: 20px;
        border-bottom: 2px solid #f1f5f9;
    }

    .back-btn-inside {
        background: #28a745;
        color: white;
        padding: 10px 18px;
        text-decoration: none;
        border-radius: 6px;
        font-weight: 500;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .back-btn-inside:hover {
        background: #218838;
        color: white;
        text-decoration: none;
        transform: translateY(-1px);
    }

    .group-info-section {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 25px;
        border-radius: 10px;
        margin-bottom: 25px;
        position: relative;
        overflow: hidden;
    }

    .group-info-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1.5" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="1" fill="white" opacity="0.05"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>') repeat;
        z-index: 1;
    }

    .group-info-content {
        position: relative;
        z-index: 2;
    }

    .group-title {
        font-size: 1.8rem;
        font-weight: 700;
        margin: 0 0 15px 0;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .member-count-badge {
        background: rgba(255, 255, 255, 0.2);
        padding: 6px 14px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        backdrop-filter: blur(10px);
    }

    .group-meta {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 0.95rem;
    }

    .meta-item i {
        width: 18px;
        text-align: center;
        opacity: 0.8;
    }

    .controls-section {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 20px;
        border-bottom: 1px solid #e9ecef;
    }

    .delete-all-btn {
        background: #dc3545;
        color: white;
        padding: 12px 25px;
        text-decoration: none;
        border-radius: 8px;
        font-weight: 600;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .delete-all-btn:hover {
        background: #c82333;
        color: white;
        text-decoration: none;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
    }

    .members-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .member-card {
        background: linear-gradient(135deg, #f8fff9 0%, #ffffff 100%);
        border: 2px solid #e8f5e8;
        border-radius: 12px;
        padding: 20px;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .member-card:hover {
        transform: translateX(5px);
        box-shadow: 0 8px 25px rgba(40, 167, 69, 0.15);
        border-color: #28a745;
    }

    .member-card.removing {
        opacity: 0.5;
        transform: scale(0.95);
        transition: all 0.5s ease;
    }

    .member-card::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: linear-gradient(135deg, #28a745 0%, #ffd700 100%);
    }

    .member-main-info {
        flex: 1;
        min-width: 0;
    }

    .member-name {
        font-size: 1.3rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0 0 5px 0;
    }

    .member-pno {
        color: #28a745;
        font-size: 0.95rem;
        font-weight: 600;
        background: #e8f5e8;
        padding: 4px 10px;
        border-radius: 6px;
        display: inline-block;
        margin-bottom: 10px;
    }

    .member-details-inline {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        align-items: center;
    }

    .detail-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
        color: #495057;
    }

    .detail-icon {
        width: 16px;
        text-align: center;
        color: #28a745;
    }

    .detail-value {
        font-weight: 500;
    }

    .detail-value.not-available {
        color: #6c757d;
        font-style: italic;
    }

    .detail-value a {
        color: #28a745;
        text-decoration: none;
        font-weight: 600;
    }

    .detail-value a:hover {
        text-decoration: underline;
    }

    .member-status-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        white-space: nowrap;
    }

    .status-active {
        background: #d4edda;
        color: #155724;
        border: 2px solid #28a745;
    }

    .status-closed {
        background: #f8d7da;
        color: #721c24;
        border: 2px solid #dc3545;
    }

    .remove-btn {
        background: #dc3545;
        color: white;
        border: none;
        padding: 10px 18px;
        border-radius: 8px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 6px;
        white-space: nowrap;
    }

    .remove-btn:hover {
        background: #c82333;
        transform: scale(1.05);
    }

    .no-members {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .no-members i {
        font-size: 4rem;
        margin-bottom: 20px;
        opacity: 0.3;
        color: #28a745;
    }

    .no-members h3 {
        margin: 0 0 10px 0;
        color: #495057;
    }

    /* Enhanced Delete Group Button Styles */
    .delete-group-container {
        margin-top: 30px;
        display: flex;
        justify-content: center;
    }

    .delete-group-btn {
        background: linear-gradient(135deg, #dc3545 0%, #b21e2f 100%);
        color: white;
        border: none;
        padding: 16px 32px;
        border-radius: 12px;
        font-size: 1.1rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.4s ease;
        display: inline-flex;
        align-items: center;
        gap: 12px;
        text-decoration: none;
        position: relative;
        overflow: hidden;
        box-shadow: 0 8px 25px rgba(220, 53, 69, 0.3);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .delete-group-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.6s ease;
    }

    .delete-group-btn:hover::before {
        left: 100%;
    }

    .delete-group-btn:hover {
        transform: translateY(-3px) scale(1.05);
        box-shadow: 0 15px 40px rgba(220, 53, 69, 0.4);
        background: linear-gradient(135deg, #b21e2f 0%, #dc3545 100%);
        color: white;
        text-decoration: none;
    }

    .delete-group-btn:active {
        transform: translateY(-1px) scale(1.02);
    }

    .delete-group-btn .btn-icon {
        font-size: 1.3rem;
        transition: transform 0.3s ease;
    }

    .delete-group-btn:hover .btn-icon {
        transform: rotate(15deg) scale(1.1);
    }

    .delete-group-btn .btn-text {
        position: relative;
        z-index: 2;
    }

    
    /* Confirmation highlight effect */
    .delete-group-btn.confirming {
        animation: confirmPulse 0.6s ease-in-out;
    }

    @@keyframes confirmPulse {
        0%, 100% {
            transform: translateY(-3px) scale(1.05);
        }
        50% {
            transform: translateY(-3px) scale(1.1);
            box-shadow: 0 20px 50px rgba(220, 53, 69, 0.5);
        }
    }

    .alert {
        padding: 12px 20px;
        margin-bottom: 20px;
        border-radius: 8px;
        font-weight: bold;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }


    @@media (max-width: 768px) {
        .member-card {
            flex-direction: column;
            text-align: center;
        }

        .member-details-inline {
            flex-direction: column;
            gap: 10px;
            align-items: flex-start;
        }

        .member-status-section {
            width: 100%;
        }

        .controls-section {
            flex-direction: column;
            align-items: stretch;
        }

        .card-header {
            flex-direction: column;
            gap: 15px;
            align-items: flex-start;
        }

        .card,
        .warning-alert-top,
        .alert {
            margin-left: 0;
            margin-right: 0;
        }

        .delete-group-btn {
            font-size: 1rem;
            padding: 14px 28px;
        }

        .delete-tooltip::after {
            max-width: 250px;
            font-size: 0.8rem;
        }
    }
</style>

<div class="page-container">
    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            <i class="fas fa-check-circle"></i>
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle"></i>
            @TempData["ErrorMessage"]
        </div>
    }

    <!-- Warning Alert at Top (Outside main container) -->
    @if (showDeleteOption)
    {
        <div class="warning-alert-top">
            <h5>
                <i class="fas fa-exclamation-triangle"></i>
                Group Deletion Mode
            </h5>
            <p style="margin: 10px 0 0 0;">
                This group cannot be deleted because it has members.
                Remove members individually or use the "Remove All & Delete Group" button.
                <strong style="color: #dc3545;">This action cannot be undone!</strong>
            </p>
        </div>
    }

    <!-- Main Container - Now using .card to match manage groups -->
    <div class="card">
        <!-- Card Header with Back Button -->
        <div class="card-header">
            <span>Group Members</span>
            <a href="@Url.Action("Index", "Groups")" class="back-btn-inside">
                <i class="fas fa-arrow-left"></i>
                Back to Groups
            </a>
        </div>

        <!-- Group Information Section -->
        @if (group != null)
        {
            <div class="group-info-section">
                <div class="group-info-content">
                    <div class="group-title">
                        <span>@group.GroupName</span>
                        <div class="member-count-badge">
                            @(Model != null ? Model.Count() : 0) Members
                        </div>
                    </div>

                    <div class="group-meta">
                        <div class="meta-item">
                            <i class="fas fa-layer-group"></i>
                            <span>
                                <strong>Program:</strong>
                                @if (group.Program != null)
                                {
                                    @group.Program.Name
                                }
                                else
                                {
                                    <span style="opacity: 0.7;">Not Assigned</span>
                                }
                            </span>
                        </div>
                        <div class="meta-item">
                            <i class="fas fa-user-tie"></i>
                            <span>
                                <strong>Manager:</strong>
                                @if (!string.IsNullOrEmpty(group.ManagerName))
                                {
                                    @group.ManagerName <small style="opacity: 0.7;">(@group.ManagerPno)</small>
                                }
                                else
                                {
                                    <span style="opacity: 0.7;">No Manager</span>
                                }
                            </span>
                        </div>
                        <div class="meta-item">
                            <i class="fas fa-hashtag"></i>
                            <span><strong>Group ID:</strong> @group.Gid</span>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Controls Section -->
        @if (showDeleteOption && Model != null && Model.Any())
        {
            <div class="controls-section">
                <button type="button" class="delete-all-btn" onclick="confirmDeleteAll()">
                    <i class="fas fa-trash-alt"></i>
                    Remove All & Delete Group
                </button>
            </div>
        }

        <!-- Members List -->
        @if (Model != null && Model.Any())
        {
            <div class="members-list">
                @foreach (var member in Model)
                {
                    <div class="member-card" id="member-card-@member.Sno">
                        <div class="member-main-info">
                            <h4 class="member-name">@member.Name</h4>
                            <div class="member-pno">@member.Pno</div>

                            <div class="member-details-inline">
                                <div class="detail-item">
                                    <i class="fas fa-envelope detail-icon"></i>
                                    <span class="detail-value @(string.IsNullOrEmpty(member.Email) ? "not-available" : "")">
                                        @if (!string.IsNullOrEmpty(member.Email))
                                        {
                                            <a href="mailto:@member.Email">@member.Email</a>
                                        }
                                        else
                                        {
                                            <span>No email available</span>
                                        }
                                    </span>
                                </div>

                                <div class="detail-item">
                                    <i class="fas fa-phone detail-icon"></i>
                                    <span class="detail-value @(string.IsNullOrEmpty(member.Mobile) ? "not-available" : "")">
                                        @if (!string.IsNullOrEmpty(member.Mobile))
                                        {
                                            @member.Mobile
                                        }
                                        else
                                        {
                                            <span>No mobile available</span>
                                        }
                                    </span>
                                </div>

                                <div class="detail-item">
                                    <i class="fas fa-map-marker-alt detail-icon"></i>
                                    <span class="detail-value @(string.IsNullOrEmpty(member.WorkArea) ? "not-available" : "")">
                                        @if (!string.IsNullOrEmpty(member.WorkArea))
                                        {
                                            @member.WorkArea
                                        }
                                        else
                                        {
                                            <span>No work area assigned</span>
                                        }
                                    </span>
                                </div>

                                <div class="detail-item">
                                    <i class="fas fa-clock detail-icon"></i>
                                    <span class="detail-value @(!member.LastLogin.HasValue ? "not-available" : "")">
                                        @if (member.LastLogin.HasValue)
                                        {
                                            @member.LastLogin.Value.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                        }
                                        else
                                        {
                                            <span>Never logged in</span>
                                        }
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div class="member-status-section">
                            @if (member.Status == "A")
                            {
                                <span class="status-badge status-active">Active</span>
                            }
                            else if (member.Status == "C")
                            {
                                <span class="status-badge status-closed">Closed</span>
                            }

                            @if (showDeleteOption)
                            {
                                <button type="button" class="remove-btn"
                                        onclick="confirmRemoveMember('@member.Pno', '@member.Name', @member.Gid)"
                                        title="Remove @member.Name from group">
                                    <i class="fas fa-times"></i>
                                    Remove
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="no-members">
                <i class="fas fa-users"></i>
                <h3>No Members Found</h3>
                <p>This group currently has no members assigned.</p>
                @if (showDeleteOption)
                {
                    <div class="delete-group-container">
                        <div class="delete-tooltip">
                            <a href="@Url.Action("Delete", "Groups", new { id = group?.Gid })"
                               class="delete-group-btn"
                               onclick="return confirmDeleteGroup('@(group?.GroupName ?? "this group")')">
                                
                                <span class="btn-text">Delete Group</span>
                            </a>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Remove Individual Member Modal -->
<div class="modal fade" id="removeMemberModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Remove Member</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to remove <strong id="memberNameToRemove"></strong> from this group?</p>
                <p class="text-danger"><small>This action cannot be undone.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <form id="removeMemberForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="groupId" id="groupIdToRemove" />
                    <input type="hidden" name="memberPno" id="memberPnoToRemove" />
                    <button type="submit" class="btn btn-danger">Remove Member</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Remove All Members Modal -->
<div class="modal fade" id="removeAllModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete Group</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>⚠️ Warning: This will permanently:</strong></p>
                <ul>
                    <li>Remove ALL members from the group</li>
                    <li>Delete the group completely</li>
                </ul>
                <p class="text-danger"><strong>This action cannot be undone!</strong></p>
                <p>Are you sure you want to proceed?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <form id="removeAllForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="groupId" value="@(group?.Gid ?? 0)" />
                    <button type="submit" class="btn btn-danger">Delete Group & Remove All Members</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function confirmRemoveMember(memberPno, memberName, groupId) {
        document.getElementById('memberNameToRemove').textContent = memberName;
        document.getElementById('memberPnoToRemove').value = memberPno;
        document.getElementById('groupIdToRemove').value = groupId;
        document.getElementById('removeMemberForm').action = '@Url.Action("RemoveMember", "Groups")';

        // Add visual feedback
        var memberCard = document.getElementById('member-card-' + memberPno.replace(/[^a-zA-Z0-9]/g, ''));
        if (memberCard) {
            memberCard.classList.add('removing');
        }

        // Show modal
        if (typeof $ !== 'undefined') {
            $('#removeMemberModal').modal('show');

            // Remove visual feedback if modal is cancelled
            $('#removeMemberModal').on('hidden.bs.modal', function () {
                if (memberCard) {
                    memberCard.classList.remove('removing');
                }
            });
        } else {
            // Fallback confirmation
            if (confirm('Are you sure you want to remove ' + memberName + ' from this group?')) {
                submitRemoveMemberForm(groupId, memberPno);
            } else if (memberCard) {
                memberCard.classList.remove('removing');
            }
        }
    }

    function submitRemoveMemberForm(groupId, memberPno) {
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = '@Url.Action("RemoveMember", "Groups")';

        var antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]');
        if (antiForgeryToken) {
            form.appendChild(antiForgeryToken.cloneNode());
        }

        var groupInput = document.createElement('input');
        groupInput.type = 'hidden';
        groupInput.name = 'groupId';
        groupInput.value = groupId;
        form.appendChild(groupInput);

        var memberInput = document.createElement('input');
        memberInput.type = 'hidden';
        memberInput.name = 'memberPno';
        memberInput.value = memberPno;
        form.appendChild(memberInput);


        // Add showDeleteOption to maintain delete mode
        var deleteOptionInput = document.createElement('input');
        deleteOptionInput.type = 'hidden';
        deleteOptionInput.name = 'showDeleteOption';
        deleteOptionInput.value = '@showDeleteOption.ToString().ToLower()';
        form.appendChild(deleteOptionInput);

        document.body.appendChild(form);
        form.submit();
    }

    function confirmDeleteAll() {
        document.getElementById('removeAllForm').action = '@Url.Action("RemoveAllMembersAndDelete", "Groups")';

        // Show modal
        if (typeof $ !== 'undefined') {
            $('#removeAllModal').modal('show');
        } else {
            // Fallback confirmation
            if (confirm('⚠️ WARNING: This will permanently remove ALL members and delete the group. This action cannot be undone! Are you sure you want to proceed?')) {
                document.getElementById('removeAllForm').submit();
            }
        }
    }

    // Auto-hide alerts after 5 seconds
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            var alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                alert.style.opacity = '0';
                setTimeout(function() {
                    alert.style.display = 'none';
                }, 300);
            });
        }, 5000);

        // Handle form submissions with loading states
        var removeMemberForm = document.getElementById('removeMemberForm');
        if (removeMemberForm) {
            removeMemberForm.addEventListener('submit', function() {
                var submitBtn = this.querySelector('button[type="submit"]');
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Removing...';
                submitBtn.disabled = true;
            });
        }

        var removeAllForm = document.getElementById('removeAllForm');
        if (removeAllForm) {
            removeAllForm.addEventListener('submit', function() {
                var submitBtn = this.querySelector('button[type="submit"]');
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                submitBtn.disabled = true;
            });
        }
    });
</script>