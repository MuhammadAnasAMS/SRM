@model PIA_Admin_Dashboard.Models.User

@{
    ViewBag.Title = "Add New User";
    ViewBag.ScreenTitle = "User Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card" style="max-width: 600px; margin: 0 auto;">

    <div class="card-header" style="display: flex; justify-content: space-between; align-items: center;">
        <span>Add New User</span>
        <a href="@Url.Action("Index", "User")" class="btn-primary" style="
            background-color: #1d3c34;
            padding: 6px 12px;
            font-size: 14px;
            text-decoration: none;">
            ← Back
        </a>
    </div>

    @using (Html.BeginForm("Create", "User", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <!-- Employee Type -->
        <div class="form-group">
            <label>Employee Type:</label>
            <select id="employeeType" name="EmployeeType" class="styled-input" onchange="toggleEmployeeFields()" style="margin-bottom: 20px;">
                <option value="">-- Select Employee Type --</option>
                <option value="Regular">Regular Employee (PNO)</option>
                <option value="DailyWages">Daily Wages (Manual Entry)</option>
            </select>
        </div>

        <!-- Regular Employee PNO Fetch -->
        <div id="regularEmployeeSection" style="display: none;">
            <label style="color: #666;">Employee PNO:</label>
            <input type="text" id="pnoInput" class="styled-input" placeholder="Enter PNO" />

            <div style="display: flex; justify-content: center; margin-top: 10px;">
                <button type="button" onclick="fetchEmployee()" class="submit-button" style="margin: 0 auto;">
                    🔍 Fetch Employee Data
                </button>
            </div>

            <p id="fetchStatus" style="color: red; font-weight: bold; margin-top: 5px; text-align: center;"></p>
        </div>

        <!-- Image Placeholder -->
        <div style="text-align: center; margin: 25px 0;">
            <!-- TODO: Replace static image with dynamic image_url from API -->
            <img id="employeeImage"
                 src="https://www.w3schools.com/howto/img_avatar.png"
                 alt="Profile Picture"
                 style="width: 120px; height: 120px; border-radius: 50%; object-fit: cover; border: 2px solid #1d3c34;" />

            <div style="margin-top: 10px;">
                @Html.TextBoxFor(m => m.Designation, new
                {
                    @class = "styled-input",
                    placeholder = "Optional image URL...",
                    id = "Designation"
                })
            </div>
        </div>

        <!-- Input Fields -->
        <div id="manualEntrySection" style="display: none; flex-direction: column; align-items: center; gap: 20px; padding: 0 15px;">

            <div class="form-group">
                <label>Name:</label>
                @Html.TextBoxFor(m => m.Name, new { @class = "styled-input", required = "required", placeholder = "Full Name", id = "Name" })
            </div>

            <div class="form-group">
                <label>Employee ID:</label>
                @Html.TextBoxFor(m => m.EmployeeId, new { @class = "styled-input", required = "required", placeholder = "Employee ID", id = "EmployeeId" })
            </div>

            <div class="form-group">
                <label>Email:</label>
                @Html.TextBoxFor(m => m.Email, new { @class = "styled-input", type = "email", required = "required", placeholder = "Email Address", id = "Email" })
            </div>

            <div class="form-group">
                <label>Mobile:</label>
                @Html.TextBoxFor(m => m.Mobile, new { @class = "styled-input", placeholder = "Mobile Number", id = "Mobile" })
            </div>

            <div class="form-group">
                <label>Department:</label>
                @Html.DropDownList("DepartmentId", (SelectList)ViewBag.DepartmentId, "-- Select Department --", new { @class = "styled-input", required = "required" })
            </div>

            <div class="form-group">
                <label>Role:</label>
                @Html.DropDownListFor(m => m.Role, new SelectList(new[] { "Employee", "DepartmentAdmin" }), "-- Select Role --", new { @class = "styled-input", required = "required" })
            </div>

            <div class="form-group">
                <label>Status:</label>
                @Html.DropDownListFor(m => m.Status, new SelectList(new[] { "Online", "Offline" }), "-- Select Status --", new { @class = "styled-input", required = "required" })
            </div>

            <button type="submit" class="submit-button">
                ➕ Create User
            </button>

        </div>
    }
</div>

<style>
    .form-group {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        width: 100%;
        max-width: 400px;
    }

        .form-group label {
            font-size: 15px;
            margin-bottom: 4px;
            color: #333;
            font-weight: 500;
        }

    .styled-input {
        width: 100%;
        height: 40px;
        padding: 6px 10px;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 14px;
        background-color: #fafafa;
        transition: border-color 0.3s ease;
        box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
    }

        .styled-input:focus {
            border-color: #1d3c34;
            background-color: #fff;
            outline: none;
        }

    .submit-button {
        margin-top: 20px;
        background-color: #1d3c34;
        padding: 12px 25px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: bold;
        color: white;
        border: none;
        cursor: pointer;
        width: 100%;
        max-width: 400px;
    }

        .submit-button:hover {
            background-color: #145c4b;
        }
</style>

<script>
    function toggleEmployeeFields() {
        var type = document.getElementById("employeeType").value;
        var manualSection = document.getElementById("manualEntrySection");
        var pnoSection = document.getElementById("regularEmployeeSection");
        var employeeIdField = document.getElementById("EmployeeId");

        if (type === "Regular") {
            pnoSection.style.display = "block";
            manualSection.style.display = "flex";
            employeeIdField.setAttribute("readonly", "readonly");
            employeeIdField.style.backgroundColor = "#eee";
        } else if (type === "DailyWages") {
            pnoSection.style.display = "none";
            manualSection.style.display = "flex";
            employeeIdField.removeAttribute("readonly");
            employeeIdField.style.backgroundColor = "";
        } else {
            pnoSection.style.display = "none";
            manualSection.style.display = "none";
        }
    }

    function fetchEmployee() {
        var pno = document.getElementById("pnoInput").value;
        if (!pno) {
            document.getElementById("fetchStatus").innerText = "Enter PNO first.";
            return;
        }

        document.getElementById("fetchStatus").innerText = "Fetching...";

        fetch('/User/FetchEmployee?pno=' + encodeURIComponent(pno))
            .then(response => response.json())
            .then(data => {
                if (data.exists) {
                    document.getElementById("fetchStatus").innerText = "Employee already exists!";
                    document.getElementById("manualEntrySection").style.display = "none";
                    return;
                }

                if (data.success && data.user) {
                    document.getElementById("fetchStatus").innerText = "Employee fetched successfully.";
                    document.getElementById("manualEntrySection").style.display = "flex";

                    document.getElementById("Name").value = data.user.Name || '';
                    document.getElementById("EmployeeId").value = data.user.EmployeeId || '';
                    document.getElementById("Email").value = data.user.Email || '';
                    document.getElementById("Mobile").value = data.user.Mobile || '';
                    document.getElementById("Designation").value = data.user.Designation || '';

                    document.getElementById("EmployeeId").setAttribute("readonly", "readonly");
                    document.getElementById("EmployeeId").style.backgroundColor = "#eee";

                    document.getElementById("employeeType").value = "Regular";
                    toggleEmployeeFields();

                } else {
                    document.getElementById("fetchStatus").innerText = data.message || "Employee not found!";
                    document.getElementById("manualEntrySection").style.display = "none";
                }
            })
            .catch(() => {
                document.getElementById("fetchStatus").innerText = "Error fetching employee.";
                document.getElementById("manualEntrySection").style.display = "none";
            });
    }

</script>
