@model PIA_Admin_Dashboard.Models.OtpModel
@{
    ViewBag.Title = "Get OTP";
    Layout = "~/Views/Shared/Account_Layout.cshtml";
    Response.Cache.SetCacheability(HttpCacheability.NoCache);
    Response.Cache.SetNoStore();
}

<div class="login-form">
    <div class="auth-switch">
        <a href="@Url.Action("Login", "Account")" class="@(ViewBag.Title == "Login" ? "active" : "")">Login</a>
        <a href="@Url.Action("GetOtp", "Account")" class="@(ViewBag.Title == "Get OTP" ? "active" : "")">Sign Up</a>
    </div>

    <div class="logo">
        <img src="~/Content/pia-logo.png" alt="PIA Logo" style="width: 250px; margin-bottom: 10px;" />
        <p class="portal-title">PIA SRM Portal</p>
    </div>

    @using (Html.BeginForm("GetOtp", "Account", FormMethod.Post, new { id = "otpForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-group">
            @Html.LabelFor(m => m.EmployeeId)
            @Html.TextBoxFor(m => m.EmployeeId, new { @class = "form-control", placeholder = "Enter Employee ID" })
            @Html.ValidationMessageFor(m => m.EmployeeId, "", new { @class = "text-danger" })
        </div>

        if (ViewBag.MaskedEmail != null)
        {
            <div class="form-group">
                <label>Email Confirmation</label>
                <div class="info-text">
                    OTP will be sent to: <strong>@ViewBag.MaskedEmail</strong>
                </div>
                @Html.TextBoxFor(m => m.ConfirmEmail, new { @class = "form-control", placeholder = "Enter your full email" })
                @Html.ValidationMessageFor(m => m.ConfirmEmail, "", new { @class = "text-danger" })
            </div>
        }

        <button type="submit" class="btn-login" id="submitBtn">Get OTP</button>
    }
</div>

@* OTP Pop-up Card *@
@if (Session["otp_sent"] != null)
{
    <div id="otpPopup" class="popup-card" style="display:flex;">
        <div class="popup-content">
            <span class="close-btn" onclick="hidePopup()">&times;</span>
            <h3>OTP Verification</h3>
            <p>OTP has been sent to your registered contact.</p>

            <div class="validation-errors">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>

            @using (Html.BeginForm("ConfirmOtp", "Account", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <input type="text" name="otp" class="form-control" placeholder="Enter OTP" style="margin-top: 15px;" required />
                <button type="submit" class="btn-login" style="margin-top: 15px;">Verify OTP</button>
            }

            <div id="timer" class="otp-timer">Resend available in: <span id="countdown">01:00</span></div>
        </div>
    </div>
}

@section scripts {
    <script>
        function hidePopup() {
            document.getElementById("otpPopup").style.display = "none";
            fetch('@Url.Action("ClearOtpPopupState", "Account")', { method: 'POST' });
        }

        document.getElementById("otpForm")?.addEventListener("submit", function () {
            const btn = document.getElementById("submitBtn");
            btn.disabled = true;
            btn.innerText = "Sending...";
        });

        setTimeout(function () {
            const msg = document.getElementById("flashMessage");
            if (msg) msg.style.display = "none";
        }, 5000);

        // Countdown Timer Logic
        let countdownElement = document.getElementById("countdown");
        let secondsLeft = 60;

        if (countdownElement) {
            const timer = setInterval(function () {
                secondsLeft--;
                let minutes = Math.floor(secondsLeft / 60);
                let seconds = secondsLeft % 60;
                countdownElement.textContent =
                    (minutes < 10 ? "0" + minutes : minutes) + ":" +
                    (seconds < 10 ? "0" + seconds : seconds);

                if (secondsLeft <= 0) {
                    clearInterval(timer);
                    hidePopup();
                }
            }, 1000);
        }
    </script>
}

<style>
    .info-text {
        margin-bottom: 8px;
        font-size: 14px;
    }

    .popup-card {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .popup-content {
        background: white;
        padding: 30px;
        border-radius: 12px;
        width: 90%;
        max-width: 350px;
        text-align: center;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        position: relative;
    }

        .popup-content h3 {
            margin-top: 0;
            color: #034c2e;
        }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 20px;
        cursor: pointer;
        color: #aaa;
    }

        .close-btn:hover {
            color: #000;
        }

    .btn-login {
        background-color: #034c2e;
        color: white;
        padding: 10px 25px;
        border: none;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

        .btn-login:hover {
            background-color: #02653b;
        }

    .alert {
        margin: 15px 0;
        padding: 12px 20px;
        border-radius: 5px;
        font-size: 14px;
    }

    .alert-info {
        background-color: #e7f3fe;
        color: #31708f;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #842029;
        border: 1px solid #f5c2c7;
    }

    .text-danger {
        color: red;
        font-size: 13px;
        margin-top: 6px;
        display: block;
    }

    .validation-errors {
        margin-top: 10px;
    }

    .otp-timer {
        margin-top: 15px;
        font-size: 14px;
        color: #555;
    }

    #countdown {
        font-weight: bold;
        color: #d9534f;
    }
</style>
